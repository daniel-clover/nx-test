"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toProjectName = exports.Workspaces = void 0;
const path_1 = require("path");
const installation_directory_1 = require("../utils/installation-directory");
const nx_plugin_1 = require("../utils/nx-plugin");
const nx_json_1 = require("./nx-json");
const angular_json_1 = require("../adapter/angular-json");
const retrieve_workspace_files_1 = require("../project-graph/utils/retrieve-workspace-files");
const project_configuration_utils_1 = require("../project-graph/utils/project-configuration-utils");
class Workspaces {
    constructor(root) {
        this.root = root;
    }
    /**
     * @deprecated
     */
    readProjectsConfigurations(opts) {
        if (this.cachedProjectsConfig &&
            process.env.NX_CACHE_PROJECTS_CONFIG !== 'false') {
            return this.cachedProjectsConfig;
        }
        const nxJson = (0, nx_json_1.readNxJson)(this.root);
        const projectPaths = (0, retrieve_workspace_files_1.retrieveProjectConfigurationPaths)(this.root, nxJson);
        let projectsConfigurations = (0, project_configuration_utils_1.buildProjectsConfigurationsFromProjectPathsAndPlugins)(nxJson, projectPaths, (0, nx_plugin_1.loadNxPluginsSync)(nxJson.plugins, (0, installation_directory_1.getNxRequirePaths)(this.root), this.root), this.root).projects;
        if ((0, angular_json_1.shouldMergeAngularProjects)(this.root, opts === null || opts === void 0 ? void 0 : opts._includeProjectsFromAngularJson)) {
            projectsConfigurations = (0, angular_json_1.mergeAngularJsonAndProjects)(projectsConfigurations, this.root);
        }
        this.cachedProjectsConfig = {
            version: 2,
            projects: projectsConfigurations,
        };
        return this.cachedProjectsConfig;
    }
    /**
     * Deprecated. Use readProjectsConfigurations
     */
    readWorkspaceConfiguration(opts) {
        const nxJson = (0, nx_json_1.readNxJson)(this.root);
        return Object.assign(Object.assign({}, this.readProjectsConfigurations(opts)), nxJson);
    }
    mergeTargetDefaultsIntoProjectDescriptions(projects, nxJson) {
        var _a;
        for (const proj of Object.values(projects)) {
            if (proj.targets) {
                for (const targetName of Object.keys((_a = proj.targets) !== null && _a !== void 0 ? _a : {})) {
                    const projectTargetDefinition = proj.targets[targetName];
                    const defaults = (0, project_configuration_utils_1.readTargetDefaultsForTarget)(targetName, nxJson.targetDefaults, projectTargetDefinition.executor);
                    if (defaults) {
                        proj.targets[targetName] = (0, project_configuration_utils_1.mergeTargetConfigurations)(proj, targetName, defaults);
                    }
                }
            }
        }
        return projects;
    }
}
exports.Workspaces = Workspaces;
/**
 * Pulled from toFileName in names from @nx/devkit.
 * Todo: Should refactor, not duplicate.
 */
function toProjectName(fileName) {
    const parts = (0, path_1.dirname)(fileName).split(/[\/\\]/g);
    return parts[parts.length - 1].toLowerCase();
}
exports.toProjectName = toProjectName;
